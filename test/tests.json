{ "groups":
    [
        { "group": "Linear functions",
          "tests":
            [
                {
                    "name": "Linear function (good)",
                    "filename": "pat-tests/linfun-good.pat",
                    "exit_code": 0
                },
                {
                    "name": "Linear function (bad #1: unused linear variable)",
                    "filename": "pat-tests/linfun-bad-1.pat",
                    "exit_code": 1
                },
                {
                    "name": "Linear function (bad #2: non-linear function closing over linear variable)",
                    "filename": "pat-tests/linfun-bad-2.pat",
                    "exit_code": 1
                },
                {
                    "name": "Linear function (bad #3: unused linear function)",
                    "filename": "pat-tests/linfun-bad-3.pat",
                    "exit_code": 1
                },
                {
                    "name": "Function returning a mailbox type",
                    "filename": "pat-tests/mb-function-return.pat",
                    "exit_code": 0
                }
            ]
        },
        {
          "group": "Basic tests",
          "tests":
            [
                {
                    "name": "Arithmetic (1)",
                    "filename": "pat-tests/arith.pat",
                    "exit_code": 0
                },
                {
                    "name": "Arithmetic (2)",
                    "filename": "pat-tests/arith1.pat",
                    "exit_code": 0
                },
                {
                    "name": "Arithmetic (3)",
                    "filename": "pat-tests/arith2.pat",
                    "exit_code": 0
                },
                {
                    "name": "Functions",
                    "filename": "pat-tests/functions.pat",
                    "exit_code": 0
                },
                {
                    "name": "Sums (1)",
                    "filename": "pat-tests/sum-1.pat",
                    "exit_code": 0
                },
                {
                    "name": "Sums (2)",
                    "filename": "pat-tests/sum-2.pat",
                    "exit_code": 0
                },
                {
                    "name": "Annotated let (1)",
                    "filename": "pat-tests/let-annot-1.pat",
                    "exit_code": 0
                },
                {
                    "name": "Annotated let (2)",
                    "filename": "pat-tests/let-annot-2.pat",
                    "exit_code": 0
                },
                {
                    "name": "Annotated let (3)",
                    "filename": "pat-tests/let-annot-3.pat",
                    "exit_code": 0
                },
                {
                    "name": "Atoms",
                    "filename": "pat-tests/atoms.pat",
                    "exit_code": 0
                },
                {
                    "name": "n-tuples (1)",
                    "filename": "pat-tests/n-tuples.pat",
                    "exit_code": 0
                },
                {
                    "name": "n-tuples (2)",
                    "filename": "pat-tests/n-tuples-2.pat",
                    "exit_code": 0
                },
                {
                    "name": "n-tuples, bad (1)",
                    "filename": "pat-tests/n-tuples-bad-1.pat",
                    "exit_code": 1
                },
                {
                    "name": "n-tuples, bad (2)",
                    "filename": "pat-tests/n-tuples-bad-2.pat",
                    "exit_code": 1
                }
            ]
        },
        { "group": "Correct examples (de Liguoro & Padovani)",
          "tests":
            [
                {"name": "Account", "filename": "examples/de_liguoro_padovani/account.pat", "exit_code": 0},
                {"name": "Account with Future", "filename": "examples/de_liguoro_padovani/account_future.pat", "exit_code": 0},
                {"name": "Future", "filename": "examples/de_liguoro_padovani/future.pat", "exit_code": 0},
                {"name": "Future with explicit fail guard", "filename": "examples/de_liguoro_padovani/futurefail.pat", "exit_code": 0},
                {"name": "Future with state passing", "filename": "examples/de_liguoro_padovani/future_state_passing.pat", "exit_code": 0},
                {"name": "Lock", "filename": "examples/de_liguoro_padovani/lock.pat", "exit_code": 0},
                {"name": "Master-Worker", "filename": "examples/de_liguoro_padovani/master_worker.pat", "exit_code": 0},
                {"name": "Session types", "filename": "examples/de_liguoro_padovani/sessions.pat", "exit_code": 0}
            ]
        },
        { "group": "Correct examples (Savina)",
          "tests":
            [
                {"name": "Banking", "filename": "examples/savina/banking.pat", "exit_code": 0},
                {"name": "Big", "filename": "examples/savina/big.pat", "exit_code": 0},
                {"name": "Cigarette Smoker", "filename": "examples/savina/cig_smok.pat", "exit_code": 0},
                {"name": "Count", "filename": "examples/savina/count.pat", "exit_code": 0},
                {"name": "Fibonacci", "filename": "examples/savina/fib.pat", "exit_code": 0},
                {"name": "Fibonacci with Pairs", "filename": "examples/savina/fib_pairs.pat", "exit_code": 0},
                {"name": "kfork", "filename": "examples/savina/kfork.pat", "exit_code": 0},
                {"name": "Log Map", "filename": "examples/savina/log_map.pat", "exit_code": 0},
                {"name": "Philosopher", "filename": "examples/savina/philosopher.pat", "exit_code": 0},
                {"name": "Ping Pong", "filename": "examples/savina/ping_pong.pat", "exit_code": 0},
                {"name": "Ping Pong (Strict)", "filename": "examples/savina/ping_pong_strict.pat", "exit_code": 0},
                {"name": "Thread Ring", "filename": "examples/savina/thread_ring.pat", "exit_code": 0}
            ]
        },
        { "group": "Correct examples (Others)",
          "tests":
            [
                {"name": "n-Robots", "filename": "examples/robotsn.pat", "exit_code": 0},
                {"name": "Guard annotation is a subpattern", "filename": "examples/pat_constr.pat", "exit_code": 0}
            ]
        },
        { "group": "Incorrect examples",
          "tests":
            [
                {"name": "Aliasing through communication (1)", "filename": "errors/alias_comm1.pat", "exit_code": 1},
                {"name": "Aliasing through communication (2)", "filename": "errors/alias_comm2.pat", "exit_code": 1},
                {"name": "Aliasing through communication (3)", "filename": "errors/simple_alias_comm.pat", "exit_code": 1},
                {
                    "name": "Lock",
                    "filename": "errors/lock.pat",
                    "exit_code": 1
                },
                {
                    "name": "Future",
                    "filename": "errors/future.pat",
                    "exit_code": 1
                },
                {
                    "name": "Use after free",
                    "filename": "errors/useafterfree.pat",
                    "exit_code": 1
                },
                {
                    "name": "Use after free (2)",
                    "filename": "errors/uaf1.pat",
                    "exit_code": 1
                },
                {
                    "name": "Use after free (3)",
                    "filename": "errors/uaf2.pat",
                    "exit_code": 1
                },
                {
                    "name": "Use after free (4)",
                    "filename": "errors/uaf3.pat",
                    "exit_code": 1
                },
                {"name": "Insufficient type information", "filename": "errors/pat_constr.pat", "exit_code": 1},
                {"name": "Non-exhaustive guards", "filename": "errors/pat_constr2.pat", "exit_code": 1},
                {"name": "Additional non-supported non-fail guard with nontrivial continuation", "filename": "errors/pat_constr3.pat", "exit_code": 1},
                {"name": "Additional non-supported free guard", "filename": "errors/pat_constr4.pat", "exit_code": 1}
            ]
        },
        { "group": "Parametrized interfaces (Good)",
          "tests":
            [
                {"name": "Basic send", "filename": "examples/parametrized_interfaces/0_basic_recv.pat", "exit_code": 0},
                {"name": "Receive interface", "filename": "examples/parametrized_interfaces/1_param_recv.pat", "exit_code": 0},
                {"name": "Mirror with mutually recursive interfaces", "filename": "examples/parametrized_interfaces/2_param_send.pat", "exit_code": 0},
                {"name": "Parametrized mirror definition", "filename": "examples/parametrized_interfaces/3_param_mirror_def.pat", "exit_code": 0},
                {"name": "Parametrized mirror definition and client", "filename": "examples/parametrized_interfaces/4_param_client_def.pat", "exit_code": 0},
                {"name": "Parametrized mirror definition and client", "filename": "examples/parametrized_interfaces/4_param_client_def.pat", "exit_code": 0},
                {"name": "Fully parametrized future", "filename": "examples/parametrized_interfaces/5_param_future.pat", "exit_code": 0}
            ]
        },
        { "group": "Parametrized interfaces (Wrong)",
          "tests":
            [
                {"name": "Type is not boundable", "filename": "examples/parametrized_interfaces/wrong/0_unboundable_type.pat", "exit_code": 1},
                {"name": "Interface is not type closed", "filename": "examples/parametrized_interfaces/wrong/0_unclosed_interface.pat", "exit_code": 1},
                {"name": "Definition is not type closed", "filename": "examples/parametrized_interfaces/wrong/0_unclosed_definition.pat", "exit_code": 1},
                {"name": "Send payload mismatch", "filename": "examples/parametrized_interfaces/wrong/1_send_mismatch.pat", "exit_code": 1},
                {"name": "Spawn wrong arity", "filename": "examples/parametrized_interfaces/wrong/1_spawn_mismatch.pat", "exit_code": 1}
            ]
        }
    ]
}
